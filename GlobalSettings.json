[{"id":"10db5822.97cf88","type":"subflow","name":"GlobalSettings","info":"","category":"","in":[{"x":40,"y":60,"wires":[{"id":"8b475ac3.83c4f8"}]}],"out":[{"x":2580,"y":140,"wires":[{"id":"ab7b9c48.dc49b","port":0}]}],"env":[{"name":"nameid","type":"str","value":"","ui":{"label":{"en-US":"Pipeline name"},"type":"input","opts":{"types":["str"]}}},{"name":"kubeproxy","type":"str","value":"","ui":{"label":{"en-US":"Kubectl proxy"},"type":"input","opts":{"types":["str"]}}},{"name":"namespace","type":"str","value":"default","ui":{"label":{"en-US":"Kubernetes namespace"},"type":"input","opts":{"types":["str"]}}},{"name":"","type":"str","value":"","ui":{"type":"none","label":{},"opts":{}}},{"name":"globalsettings","type":"json","value":"{\"broker\":\"mqtt://192.168.2.241:1883\",\"logtopic\":\"global/logz\"}","ui":{"label":{"en-US":"Global settings"},"type":"input","opts":{"types":["json"]}}},{"name":"forceredeploy","type":"bool","value":"false","ui":{"label":{"en-US":"Force redeploy"},"type":"checkbox","opts":{}}}],"color":"#DDAA99","status":{"x":200,"y":160,"wires":[{"id":"9ddecb56.4f7548","port":0}]}},{"id":"68b62ab8.e62fd4","type":"http request","z":"10db5822.97cf88","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"http://localhost:1880/flows","tls":"","persist":false,"proxy":"","authType":"","x":1750,"y":60,"wires":[["1a4c35c9.570a8a"]]},{"id":"9ddecb56.4f7548","type":"status","z":"10db5822.97cf88","name":"","scope":null,"x":80,"y":160,"wires":[[]]},{"id":"1a4c35c9.570a8a","type":"function","z":"10db5822.97cf88","name":"GetNodesOrder","func":"// From the previous step we get a payload with all the live flows that node-red has \n// plus set up some variables and arrays to help us find the id of each subflow node \nvar data=msg.payload;\nvar deployments = msg.deployments;\nvar nameid=global.get(\"nameid\");\nvar envar;\nvar flowid;\nvar flownodes = [];\n//var flowservices = [];\n//var deployedservices = global.get(\"deployedservices\");\nvar deployedservices = msg.services;\nvar deletedeploys = [];\nvar deleteservices = [];\nvar deleteservicestemp = [];\nvar flownodesorder = [];\nvar flownodesappvalue = [];\nvar flownodesappname = [];\nvar modifiednodes;\n\nif (global.get(\"flownodesappname\")){\n    flownodesappname = global.get(\"flownodesappname\");\n}\n\n// A function to compare two arrays\nfunction comparearrays (a1, a2) {\n    var a = [], diff = [];\n    for (var i = 0; i < a1.length; i++) {\n        a[a1[i]] = true;\n    }\n    for (i = 0; i < a2.length; i++) {\n        if (a[a2[i]]) {\n            delete a[a2[i]];\n        } else {\n            a[a2[i]] = true;\n        }\n    }\n    for (var k in a) {\n        diff.push(k);\n    }\n    return diff;\n}\n\n// With the enviromental variable nameid that only this subflow has we pinpoint which is the current flow id and pass it to a global variable\ndata.forEach(element => {\n    if (element.type.includes(\"subflow:\")) {\n        if (element.env) { \n            envar = element.env;\n            envar.forEach(envarelement => {\n                if (envarelement.value == nameid) {\n                    flowid = element.z;\n                    global.set(\"flowid\",flowid);\n                }\n            });\n       }\n    }\n});\n\n// Nodes that in their object have the z field with the flow's id means that are the main flow's nodes and we push in an array their id and their wires variable\n// The wires describe to whom their output is connected to\ndata.forEach(element => {\n    if ((element.z == flowid) && (element.type.includes(\"subflow:\"))) {\n        if (element.wires[0][0]) {\n            flownodes.push([element.id,element.wires[0][0]]);\n        } else {\n            flownodes.push([element.id,null]);\n        }\n    }\n});\n\n// The node that doesn't have wires is the last one and from that one we trace back the order of the nodes\nflownodes.forEach(element => {\n   if (!element[1]) {\n       flownodesorder.push(element[0]);\n   }\n});\n\n// We trace back the order of the nodes by checking the node's id to whom nodes is marked as a wire, when we found the node, we push it to the array and start again until the end\nwhile (flownodesorder.length  < flownodes.length) {\n\tfor (i=0; i < flownodesorder.length; i++) {\n  \t    for (ii=0; ii < flownodes.length; ii++) {\n\t\t\tif (flownodesorder[i] == flownodes[ii][1]){\n      \t        flownodesorder.push(flownodes[ii][0]);\n            }\n\t\t}\n    }\n}\n\n// After we fill our array, we reverse it to mark the proper order\n// Finally we compare and find if a node has been deleted from the flow by comparing the nodes ids\n// After we get the id of the nodes we build a delete request that will delete the deployment\nflownodesorder=flownodesorder.reverse();\nflownodesorder.shift();\n\n// Find the nodes app name\nfor (i = 0; i < flownodesorder.length; i++) {\n    data.forEach(element => {\n        if (element.id == flownodesorder[i]) {\n\t\t\telement.env.forEach(env => {\n\t\t\t\tif (env.name == \"appname\") {;\n\t\t\t\t\tflownodesappvalue.push(nameid+'-'+flownodesorder[i].replace(\".\", \"\")+'-'+env.value);\n                }\n                /*if (env.name == \"service\" && env.value) {\n\t\t\t\t\tvar serviceenvar = JSON.parse(env.value);\n\t\t\t\t\tflowservices.push([flownodesorder[i].replace(\".\", \"\"),serviceenvar.metadata.name]);\n\t\t\t\t}*/\n            });\n\t\t}\n\t});\n}\n\n// Remove the dot from the nodes id\nfor (i = 0; i < flownodesorder.length; i++) {\n    flownodesorder[i] = flownodesorder[i].replace(\".\", \"\");\n}\n\n// Compare nodes found in the flow with actual deployments and if a deployment is not present in the flow build a msg to delete it\nif (env.get(\"forceredeploy\") !== true) {\n    modifiednodes=comparearrays(flownodesappvalue,deployments);\n}\n//if (env.get(\"forceredeploy\") === true && Object.keys(modifiednodes).length === 0) {\nif (env.get(\"forceredeploy\") === true) {\n    modifiednodes = [];\n    Array.prototype.push.apply(modifiednodes, flownodesappvalue);\n    node.warn('Inside force check');\n    node.warn(modifiednodes);\n    node.warn(modifiednodes.length);\n}\n\n//node.warn('Order:'+flownodesorder);\n//node.warn('Services:'+deployedservices);\n//node.warn('Deployments:'+deployments);\n//node.warn('Nodes:'+flownodesappvalue);\n//node.warn('Modified:'+modifiednodes);\n\nfor (i = 0; i < modifiednodes.length; i++) {\n    if (!flownodesappvalue.includes(modifiednodes[i]) || env.get(\"forceredeploy\") === true) {\n        var msg3={};\n        msg3.payload = 'gracePeriodSeconds: 0\\r\\norphanDependents: false';\n        msg3.headers = {};\n        msg3.headers[\"Content-Type\"] = 'application/yaml';\n        msg3.url = 'http://'+global.get(\"kubeproxy\")+'/apis/apps/v1/namespaces/'+global.get(\"namespace\")+'/deployments/'+modifiednodes[i];\n        //node.warn(msg3);\n        //node.warn(\"The deployment with name \"+modifiednodes[i]+\" must be deleted.\");\n        deletedeploys.push(msg3);\n        for (ii = 0; ii < flownodesorder.length; ii++) {\n            if (flownodesorder[ii] == modifiednodes[i]) {\n                flownodesorder.splice(ii, 1);\n            }\n        }\n        //node.warn('flownodesorder:'+flownodesorder);\n        \n        for (ii = 0; ii < flownodesappvalue.length; ii++) {\n            if (flownodesappvalue[ii] == modifiednodes[i]) {\n                flownodesappvalue.splice(ii, 1);\n            }\n        }\n        //node.warn('flownodesappvalue:'+flownodesappvalue);\n        \n        for (ii = 0; ii < flownodesappname.length; ii++) {\n            //if (flownodesappname[ii].nodeid == modifiednodes[i].split(\"-\")[1]) {\n            if (flownodesappname[ii].deploymentname == modifiednodes[i]) {\n                flownodesappname.splice(ii, 1);\n            }\n        }\n        //node.warn('flownodesappname is');\n        //node.warn(flownodesappname);\n        \n        for (ii = 0; ii < deployedservices.length; ii++) {\n            if (deployedservices[ii] == modifiednodes[i]) {\n                deleteservicestemp.push(deployedservices[ii]);\n            }\n        }\n    }\n}\n\nif (env.get(\"forceredeploy\") === true) {\n    deleteservicestemp = [];\n    Array.prototype.push.apply(deleteservicestemp, deployedservices);\n}\n\n\nif (deleteservicestemp.length > 0){\n    for (ii = 0; ii < deleteservicestemp.length; ii++) {\n        var msg4 = {};\n        msg4.payload = 'gracePeriodSeconds: 0\\r\\norphanDependents: false';\n        msg4.headers = {};\n        msg4.headers[\"Content-Type\"] = 'application/yaml';\n        msg4.url = 'http://'+global.get(\"kubeproxy\")+'/api/v1/namespaces/'+global.get(\"namespace\")+'/services/'+deleteservicestemp[ii];\n        //node.warn(msg4);\n        //node.warn(deleteservicestemp[ii]+\" will be deleted.\");\n        deleteservices.push(msg4);\n    }\n}\n\nif (env.get(\"forceredeploy\") === true) {\n    flownodesappname = [];\n    flownodesappvalue = [];\n}\n\nnode.warn('Deployments to be deleted');\nnode.warn(deletedeploys);\nnode.warn('Services to be deleted');\nnode.warn(deleteservices);\n\n// After building our output variable wee feed them to the outputs of the subflow.\nglobal.set(\"flownodesorder\",flownodesorder);\nglobal.set(\"flownodesappname\",flownodesappname);\nglobal.set(\"flownodesappvalue\",flownodesappvalue);\nnode.warn(global.get(\"flownodesappname\"));\n//global.set(\"deployedservices\",flowservices);\nmsg.payload = flownodesorder[0];\nnode.status({fill:\"green\",shape:\"dot\",text:\"Ready to deploy nodes\"});\nreturn [msg,deletedeploys,deleteservices];","outputs":3,"noerr":0,"x":1960,"y":60,"wires":[["45a2ec1f.b0eab4"],["80e62f76.a72d8"],["17b0f57a.92e1db"]]},{"id":"8b475ac3.83c4f8","type":"function","z":"10db5822.97cf88","name":"CheckEnviromentalVariables","func":"// Check if form fields are not empty and set corresponing global values\nif (env.get(\"nameid\")) {\n    global.set(\"nameid\", env.get(\"nameid\"));\n} else {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Form not filled correclty.\"});\n    throw(\"Pipeline name is empty.\");\n}\nif (env.get(\"kubeproxy\")) {\n    global.set(\"kubeproxy\", env.get(\"kubeproxy\"));\n} else {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Form not filled correclty.\"});\n    throw(\"Kubectl proxy is empty.\");\n}\nif (env.get(\"namespace\")) {\n    global.set(\"namespace\", env.get(\"namespace\"));\n} else {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Namespace not filled correclty.\"});\n    throw(\"Kubernetes namespace is empty.\");\n}\nif (typeof env.get(\"globalsettings\") === 'object') {\n    global.set(\"globalsettings\", env.get(\"globalsettings\"));\n} else {\n    node.status({fill:\"blue\",shape:\"dot\",text:\"Global settings is not a valid JSON object\"});\n    node.warn('Global settings is not a valid JSON object');\n} \nnode.status({fill:\"green\",shape:\"dot\",text:\"Settings passed check\"});\nmsg.url = env.get(\"kubeproxy\")+'/healthz';\nreturn msg;","outputs":1,"noerr":0,"x":240,"y":60,"wires":[["5e85caef.3137a4"]]},{"id":"80e62f76.a72d8","type":"http request","z":"10db5822.97cf88","name":"","method":"DELETE","ret":"txt","paytoqs":false,"url":"","tls":"","persist":false,"proxy":"","authType":"","x":2190,"y":200,"wires":[["899d6f4d.61163"]]},{"id":"a552106d.663ae","type":"debug","z":"10db5822.97cf88","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":2690,"y":200,"wires":[]},{"id":"5e85caef.3137a4","type":"http request","z":"10db5822.97cf88","name":"","method":"GET","ret":"txt","paytoqs":false,"url":"","tls":"","persist":false,"proxy":"","authType":"","x":520,"y":60,"wires":[["57d35431.7e294c"]]},{"id":"57d35431.7e294c","type":"function","z":"10db5822.97cf88","name":"CheckKubernetesProxy","func":"// Checking result if Kubernetes proxy is live\nif (msg.payload != \"ok\") {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Cannot talk to kubernetes proxy.\"});\n    throw(\"Cannot talk to kubernetes proxy.\");\n}\nnode.status({fill:\"green\",shape:\"dot\",text:\"Kubernetes proxy is live.\"});\n// Now set the next url to find all available deployments\nmsg.url = global.get(\"kubeproxy\")+'/apis/apps/v1/namespaces/'+global.get(\"namespace\")+'/deployments';\nreturn msg;","outputs":1,"noerr":0,"x":750,"y":60,"wires":[["399412bd.20488e"]]},{"id":"899d6f4d.61163","type":"function","z":"10db5822.97cf88","name":"DeletedDeploymentsReport","func":"node.status({fill:\"green\",shape:\"dot\",text:\"Nodes deleted.\"});\nreturn msg;","outputs":1,"noerr":0,"x":2450,"y":200,"wires":[["a552106d.663ae"]]},{"id":"399412bd.20488e","type":"http request","z":"10db5822.97cf88","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"","tls":"","persist":false,"proxy":"","authType":"","x":970,"y":60,"wires":[["96b9ad3b.4c1e8"]]},{"id":"586e280e.6989a8","type":"debug","z":"10db5822.97cf88","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1370,"y":220,"wires":[]},{"id":"96b9ad3b.4c1e8","type":"function","z":"10db5822.97cf88","name":"FindDeployments","func":"// Clean output and build an array with all deployments names needed on the next step\nvar data = msg.payload;\nvar deployments = [];\ndata.items.forEach(element => {\n    deployments.push(element.metadata.name);\n});\nmsg.deployments = deployments;\nmsg.url = global.get(\"kubeproxy\")+'/api/v1/namespaces/'+global.get(\"namespace\")+'/services';\nreturn msg;","outputs":1,"noerr":0,"x":1170,"y":60,"wires":[["586e280e.6989a8","37c77acf.c9df16"]]},{"id":"17b0f57a.92e1db","type":"http request","z":"10db5822.97cf88","name":"","method":"DELETE","ret":"txt","paytoqs":false,"url":"","tls":"","persist":false,"proxy":"","authType":"","x":2190,"y":280,"wires":[["46c1be25.3291a"]]},{"id":"434dc881.9e2a48","type":"debug","z":"10db5822.97cf88","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":2690,"y":280,"wires":[]},{"id":"46c1be25.3291a","type":"function","z":"10db5822.97cf88","name":"DeletedServicesReport","func":"node.status({fill:\"green\",shape:\"dot\",text:\"Services deleted.\"});\nreturn msg;","outputs":1,"noerr":0,"x":2440,"y":280,"wires":[["434dc881.9e2a48"]]},{"id":"97f1452d.de3968","type":"function","z":"10db5822.97cf88","name":"FindServices","func":"var data = msg.payload;\nvar services = [];\ndata.items.forEach(element => {\n    if (element.metadata.name !== 'kubernetes') {\n        services.push(element.metadata.name);\n    }\n});\nmsg.services = services;\ndelete msg.url;\nreturn msg;","outputs":1,"noerr":0,"x":1530,"y":60,"wires":[["68b62ab8.e62fd4"]]},{"id":"37c77acf.c9df16","type":"http request","z":"10db5822.97cf88","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"","tls":"","persist":false,"proxy":"","authType":"","x":1370,"y":60,"wires":[["97f1452d.de3968"]]},{"id":"45a2ec1f.b0eab4","type":"delay","z":"10db5822.97cf88","name":"","pauseType":"delay","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":2180,"y":140,"wires":[["ab7b9c48.dc49b"]]},{"id":"ab7b9c48.dc49b","type":"function","z":"10db5822.97cf88","name":"Inform for a delay","func":"node.status({fill:\"green\",shape:\"dot\",text:\"Ready to go.\"});\nreturn msg;","outputs":1,"noerr":0,"x":2410,"y":140,"wires":[[]]},{"id":"74b675a7.2672ec","type":"subflow:10db5822.97cf88","z":"11ac64d5.10699b","name":"","x":560,"y":360,"wires":[[]]}]