[{"id":"10db5822.97cf88","type":"subflow","name":"mqttStrandSettings","info":"","category":"","in":[{"x":40,"y":60,"wires":[{"id":"8b475ac3.83c4f8"}]}],"out":[{"x":780,"y":60,"wires":[{"id":"1a4c35c9.570a8a","port":0}]}],"env":[{"name":"nameid","type":"str","value":"","ui":{"label":{"en-US":"Pipeline Name"},"type":"input","opts":{"types":["str"]}}},{"name":"kubeproxy","type":"str","value":"","ui":{"label":{"en-US":"Kubectl Proxy"},"type":"input","opts":{"types":["str"]}}},{"name":"broker","type":"str","value":"","ui":{"label":{"en-US":"MQTT Broker"},"type":"input","opts":{"types":["str"]}}},{"name":"gitprofileurl","type":"str","value":"","ui":{"label":{"en-US":"Git profile url"},"type":"input","opts":{"types":["str"]}}}],"color":"#DDAA99","status":{"x":260,"y":160,"wires":[{"id":"9ddecb56.4f7548","port":0}]}},{"id":"68b62ab8.e62fd4","type":"http request","z":"10db5822.97cf88","name":"","method":"GET","ret":"obj","paytoqs":false,"url":"http://localhost:1880/flows","tls":"","persist":false,"proxy":"","authType":"","x":450,"y":60,"wires":[["1a4c35c9.570a8a"]]},{"id":"9ddecb56.4f7548","type":"status","z":"10db5822.97cf88","name":"","scope":["1a4c35c9.570a8a"],"x":80,"y":160,"wires":[[]]},{"id":"1a4c35c9.570a8a","type":"function","z":"10db5822.97cf88","name":"GetNodesOrder","func":"// From the previous step we get a payload with all the live flows that node-red has \n// plus set up some variables and arrays to help us find the id of each subflow node \nvar data=msg.payload;\nmsg.payload='';\nvar nameid=global.get(\"nameid\");\nvar envar;\nvar flowid;\nvar flownodes = [];\nvar deletedeploys = [];\nvar numberofnodes;\nvar flownodesorder = [];\nif (global.get(\"flownodesorder\")){\n    var flownodesordertemp = global.get(\"flownodesorder\");\n}\nif (global.get(\"flownodesappname\")){\n    var flownodesappname = global.get(\"flownodesappname\");\n} else {\n    flownodesappname = [];\n}\nvar modifiednodes;\nvar i=0;\nvar ii=0;\n\n// A function to compare two arrays\nfunction comparearrays (a1, a2) {\n    var a = [], diff = [];\n    for (var i = 0; i < a1.length; i++) {\n        a[a1[i]] = true;\n    }\n    for (i = 0; i < a2.length; i++) {\n        if (a[a2[i]]) {\n            delete a[a2[i]];\n        } else {\n            a[a2[i]] = true;\n        }\n    }\n    for (var k in a) {\n        diff.push(k);\n    }\n    return diff;\n}\n\n// With the enviromental variable nameid that only this subflow has we pinpoint which is the current flow id and pass it to a global variable\ndata.forEach(element => {\n    if (element.type.includes(\"subflow:\")) {\n        if (element.env) { \n            envar = element.env;\n            envar.forEach(envarelement => {\n                if (envarelement.value == nameid) {\n                    flowid = element.z;\n                    global.set(\"flowid\",flowid);\n                }\n            });\n       }\n    }\n});\n// Nodes that in their object have the z field with the flow's id means that are the main flow's nodes and we push in an array their id and their wires variable\n// The wires describe to whom their output is connected to\ndata.forEach(element => {\n    if ((element.z == flowid) && (element.type.includes(\"subflow:\"))) {\n        if (element.wires[0][0]) {\n            flownodes.push([element.id.replace(\".\", \"\"),element.wires[0][0].replace(\".\", \"\")]);\n        } else {\n            flownodes.push([element.id.replace(\".\", \"\"),null]);\n        }\n    }\n});\nnumberofnodes = flownodes.length;\n// The node that doesn't have wires is the last one and from that one we trace back the order of the nodes\nflownodes.forEach(element => {\n   if (element[1] == null) {\n       flownodesorder.push(element[0].replace(\".\", \"\"));\n   }\n});\n\n// We trace back the order of the nodes by checking the node's id to whom nodes is marked as a wire, when we found the node, we push it to the array and start again until the end\nwhile (flownodesorder.length < numberofnodes) {\n    if (flownodes[i][1] == flownodesorder[ii]) {\n        flownodesorder.push(flownodes[i][0]);\n        //flownodesorder[ii] = flownodesorder[ii].replace(\".\", \"\");\n        ii++;\n        i=0;\n    } else {\n        i++;\n    }\n}\n\n// After we fill our array, we reverse it to mark the proper order\n// Finally we compare and find if a node has been deleted from the flow by comparing the nodes ids\n// After we get the id of the nodes we build a delete request that will delete the deployment\nflownodesorder=flownodesorder.reverse();\n\nif (Array.isArray(flownodesordertemp) && flownodesordertemp.length) {\n    modifiednodes=comparearrays(flownodesorder,flownodesordertemp);\n    for (i = 0; i < modifiednodes.length; i++) {\n        if (!flownodesorder.includes(modifiednodes[i])) {\n            for (ii = 0; ii < flownodesappname.length; ii++) {\n                if (flownodesappname[ii].nodeid == modifiednodes[i]){\n                    var msg2={};\n                    msg2.payload = 'gracePeriodSeconds: 0\\r\\norphanDependents: false';\n                    msg2.headers = {};\n                    msg2.headers[\"Content-Type\"] = 'application/yaml';\n                    msg2.url = 'http://'+global.get(\"kubeproxy\")+'/apis/apps/v1/namespaces/default/deployments/'+nameid+'-'+modifiednodes[i]+'-'+flownodesappname[ii].type;\n                    node.warn(msg2);\n                    node.warn(\"The deployment with name \"+nameid+'-'+modifiednodes[i]+'-'+flownodesappname[ii].type+\" must be deleted.\");\n                    flownodesappname.splice(ii,1);\n                    for (iii = 0; iii < modifiednodes.length; iii++) {\n                        if (flownodesorder == modifiednodes[i]){\n                            flownodesorder.splice(iii, 1)\n                        }\n                    }\n                    deletedeploys.push(msg2);\n                } else {\n                    msg2 = null;\n                }\n            }\n        }\n    }\n} else {\n    msg2 = null;\n}\n// After building our output variable wee feed them to the outputs of the subflow.\nglobal.set(\"flownodesorder\",flownodesorder);\nglobal.set(\"flownodesappname\",flownodesappname);\nmsg.payload = flownodesorder[1];\nnode.status({fill:\"green\",shape:\"dot\",text:\"Settings passed check\"});\nreturn [msg,deletedeploys];","outputs":2,"noerr":0,"x":640,"y":60,"wires":[[],["80e62f76.a72d8"]]},{"id":"8b475ac3.83c4f8","type":"function","z":"10db5822.97cf88","name":"CheckEnviromentalVariables","func":"// Check if form fields are not empty and set corresponing global values\nif (env.get(\"nameid\") == \"\") {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Form not filled correclty.\"});\n    throw(\"Pipeline name is empty.\");\n} else {\n    global.set(\"nameid\", env.get(\"nameid\"))\n}\nif (env.get(\"kubeproxy\") == \"\") {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Form not filled correclty.\"});\n    throw(\"Kubectl proxy is empty.\");\n} else {\n    global.set(\"kubeproxy\", env.get(\"kubeproxy\"))\n}\nif (env.get(\"broker\") == \"\") {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Form not filled correclty.\"});\n    throw(\"MQTT Broker is empty.\");\n} else {\n    global.set(\"broker\", env.get(\"broker\"))\n}\nif (env.get(\"gitprofileurl\") == \"\") {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Form not filled correclty.\"});\n    throw(\"Base git profile is empty.\");\n} else {\n    global.set(\"gitprofileurl\", env.get(\"gitprofileurl\"))\n}\nnode.status({fill:\"green\",shape:\"dot\",text:\"Settings passed check\"});\nreturn msg;","outputs":1,"noerr":0,"x":220,"y":60,"wires":[["68b62ab8.e62fd4"]]},{"id":"80e62f76.a72d8","type":"http request","z":"10db5822.97cf88","name":"","method":"DELETE","ret":"txt","paytoqs":false,"url":"","tls":"","persist":false,"proxy":"","authType":"","x":810,"y":200,"wires":[["a552106d.663ae"]]},{"id":"a552106d.663ae","type":"debug","z":"10db5822.97cf88","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":1000,"y":200,"wires":[]},{"id":"24de8143.2a84fe","type":"subflow:10db5822.97cf88","z":"11ac64d5.10699b","name":"","env":[{"name":"nameid","value":"test","type":"str"},{"name":"kubeproxy","value":"192.168.2.241:8080","type":"str"},{"name":"broker","value":"192.168.2.241:1883","type":"str"},{"name":"gitprofileurl","value":"https://github.com/aknts/","type":"str"}],"x":350,"y":100,"wires":[["4bba1b83.a53e74"]]}]